---
name: Appcelerator.EncryptedDatabase
summary: Provides transparent, secure 256-bit AES encryption of SQLite database files.
description: |
    This module exposes the same API as Titanium.Database, but it encrypts everything (even schema) using a password you specify. 

    ### Getting Started

    -   View the [Using Titanium Modules](http://docs.appcelerator.com/titanium/latest/#!/guide/Using_Titanium_Modules) 
        document for instructions on getting started with using this module in your application.

    ### Accessing the Module

    -   Use `require` to access this module from JavaScript:

            var encryptedDatabase = require("appcelerator.encrypteddatabase");

        The `encryptedDatabase` variable is a reference to the Module object.

    ### Example applications

    -   Example applications are located in the `example` folder of the module:

        - `ToDo Alloy` demonstrates how to use this module with Alloy.

extends: Titanium.Database
since: "1.0.0"
platforms: [android,iphone,ipad]

properties:

  - name: password
    summary: |
        The password with which to encrypt data.
    type: String
    since: "1.0.0"

  
examples:
  - title: Opening Encrypted Database
    example: |
        This example demonstrates the proper technique for connecting to an encrypted database.

            var encryptedDatabase = require("appcelerator.encrypteddatabase");
            encryptedDatabase.password = "my great password";

            var db = encryptedDatabase.open('mydb);
            db.execute('CREATE TABLE IF NOT EXISTS people (name TEXT, phone_number TEXT, city TEXT)');
            db.execute('DELETE FROM people');
            db.execute('INSERT INTO people (name, phone_number, city) VALUES (?, ?, ?)', ['Paul', '020 7000 0000', 'London']);
            var rows = db.execute('SELECT rowid,name,phone_number,city FROM people');
            while (rows.isValidRow()) {
                alert('Person ---> ROWID: ' + rows.fieldByName('rowid')
                    + ', name:' + rows.field(1)
                    + ', phone_number: ' + rows.fieldByName('phone_number')
                    + ', city: ' + rows.field(3));
                rows.next();
            }
            rows.close();
            db.close();
